rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    /**
     * Checks if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * Checks if the user is a designated Super Admin.
     * This is determined by a custom claim on their auth token.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }
    
    /**
     * Checks if the user owns the specified document.
     * @param userId The user ID to check against the authenticated user's UID.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }
    
    /**
     * Checks if the currently authenticated user is the admin of the company
     * by checking the adminUid field on the company document.
     * @param companyId The ID of the company document.
     */
    function isCompanyAdmin(companyId) {
      let companyDoc = get(/databases/$(database)/documents/companies/$(companyId));
      return isSignedIn() && companyDoc.data.adminUid == request.auth.uid;
    }

    // ============================================================================
    // USERS COLLECTION
    // ============================================================================

    match /users/{userId} {
      allow read: if isOwner(userId) || isSuperAdmin();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) &&
                       request.resource.data.superAdmin == resource.data.superAdmin &&
                       request.resource.data.adminOf == resource.data.adminOf;
    }

    // ============================================================================
    // COMPANIES (TENANTS) COLLECTION
    // ============================================================================
    
    match /companies/{companyId} {
      // Allow get if user is super admin, the company admin, or if the company is public.
      // Also allow if the resource doesn't exist, to permit company ID availability checks.
      allow get: if isSuperAdmin() || isCompanyAdmin(companyId) || 
                    (resource != null && resource.data.isPublic == true) || 
                    (resource == null && isSignedIn());

      allow list: if isSuperAdmin();
      
      // Allow create if user is signed in and sets themselves as the admin.
      allow create: if (isSignedIn() && request.resource.data.adminUid == request.auth.uid) || isSuperAdmin();
      
      // Allow update if user is super admin or the company admin (checking the existing document).
      allow update: if isSuperAdmin() || (isSignedIn() && resource.data.adminUid == request.auth.uid);
      
      allow delete: if isSuperAdmin();
      
      // --- NESTED: SERVICES SUBCOLLECTION ---
      match /services/{serviceId} {
        allow read: if get(/databases/$(database)/documents/companies/$(companyId)).data.isPublic == true || 
                       isSuperAdmin() || isCompanyAdmin(companyId);
        
        // Combine authorization with data validation for create/update.
        allow create, update: if (isSuperAdmin() || isCompanyAdmin(companyId)) &&
                                 request.resource.data.name is string &&
                                 request.resource.data.name.size() > 1 &&
                                 request.resource.data.name.size() < 100 &&
                                 request.resource.data.minimumPrice is number &&
                                 request.resource.data.minimumPrice >= 0;
        
        allow delete: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      // --- NESTED: BOOKINGS SUBCOLLECTION ---
      match /bookings/{bookingId} {
        allow read, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
        // This rule allows anyone to create a booking, which is intended for the public booking form.
        allow create: if request.resource.data.customerInfo.email is string &&
                         request.resource.data.totalPrice is number &&
                         request.resource.data.totalPrice >= 0 &&
                         request.resource.data.status == 'pending';
      }
    }
    
    // ============================================================================
    // DEPRECATED & GLOBAL COLLECTIONS
    // ============================================================================
    
    match /tenants/{tenantId} {
        allow read, write: if false; // Disallow all access.
    }
  }
}
