rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    /**
     * Checks if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * Checks if the user is a designated Super Admin.
     * This is determined by a custom claim on their auth token.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }

    /**
     * Checks if the user is an admin of a specific company.
     * @param companyId The ID of the company to check against.
     */
    function isCompanyAdmin(companyId) {
      return isSignedIn() && request.auth.token.adminOf == companyId;
    }
    
    /**
     * Checks if the user owns the specified document.
     * @param userId The user ID to check against the authenticated user's UID.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    // ============================================================================
    // USERS COLLECTION
    // ============================================================================

    match /users/{userId} {
      // A user can read and write to their own profile.
      // A Super Admin can read any user's profile, but cannot write to it (to prevent impersonation).
      allow read: if isOwner(userId) || isSuperAdmin();
      allow write: if isOwner(userId);

      // Data validation for user profiles
      // Ensures that a user cannot grant themselves superAdmin or adminOf status.
      allow update: if request.resource.data.superAdmin == resource.data.superAdmin &&
                       request.resource.data.adminOf == resource.data.adminOf;
    }

    // ============================================================================
    // COMPANIES (TENANTS) COLLECTION
    // ============================================================================
    
    match /companies/{companyId} {
      // READ: Allowed if the company is public, or if the user is a super admin or an admin of that specific company.
      allow read: if resource.data.isPublic == true || isSuperAdmin() || isCompanyAdmin(companyId);
      
      // CREATE: Only a Super Admin can create a new company document.
      allow create: if isSuperAdmin();
      
      // UPDATE: A Super Admin or an admin of that company can update it.
      allow update: if isSuperAdmin() || isCompanyAdmin(companyId);
      
      // DELETE: Only a Super Admin can delete a company document.
      allow delete: if isSuperAdmin();
      
      // --- NESTED: SERVICES SUBCOLLECTION ---
      match /services/{serviceId} {
        // Anyone who can read the parent company can also read its services.
        allow read: if get(/databases/$(database)/documents/companies/$(companyId)).data.isPublic == true || 
                       isSuperAdmin() || isCompanyAdmin(companyId);
                       
        // Only company admins and super admins can create, update, or delete services.
        allow create, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
        
        // Data validation for creating/updating a service.
        allow write: if request.resource.data.name is string &&
                        request.resource.data.name.size() > 1 &&
                        request.resource.data.name.size() < 100 &&
                        request.resource.data.minimumPrice is number &&
                        request.resource.data.minimumPrice >= 0;
      }
      
      // --- NESTED: BOOKINGS SUBCOLLECTION ---
      match /bookings/{bookingId} {
        // READ/UPDATE/DELETE: Only company admins and super admins can manage bookings.
        allow read, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
        
        // CREATE: Anyone can create a booking (e.g., from a public booking form),
        // but we validate the incoming data to ensure it's valid.
        allow create: if request.resource.data.customerInfo.email is string &&
                         request.resource.data.totalPrice is number &&
                         request.resource.data.totalPrice >= 0 &&
                         // Ensure the status is 'pending' on creation.
                         request.resource.data.status == 'pending';
      }
    }
    
    // ============================================================================
    // DEPRECATED & GLOBAL COLLECTIONS
    // ============================================================================
    
    // The old /tenants/ path is now deprecated and should not be used. All rules are on /companies/.
    match /tenants/{tenantId} {
        allow read, write: if false; // Disallow all access.
    }
  }
}
