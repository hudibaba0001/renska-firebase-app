rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ============================================================================
    // HELPER FUNCTIONS
    // ============================================================================
    
    /**
     * Checks if the user is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * Checks if the user is a designated Super Admin.
     * This is determined by a custom claim on their auth token.
     */
    function isSuperAdmin() {
      return isSignedIn() && request.auth.token.superAdmin == true;
    }

    /**
     * Checks if the user is the admin of the company by comparing adminUid.
     * @param companyId The ID of the company document.
     */
    function isCompanyAdmin(companyId) {
      let companyDoc = get(/databases/$(database)/documents/companies/$(companyId));
      return isSignedIn() && companyDoc.data.adminUid == request.auth.uid;
    }
    
    /**
     * Checks if the user owns the specified document.
     * @param userId The user ID to check against the authenticated user's UID.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    // ============================================================================
    // USERS COLLECTION
    // ============================================================================

    match /users/{userId} {
      // TEMPORARY: Allow all users to read any user profile for debugging.
      allow read: if true;
      // Allow a user to create their own profile.
      allow create: if isOwner(userId);
      // Allow a user to update their own profile, but not grant themselves special permissions.
      allow update: if isOwner(userId) &&
                       request.resource.data.superAdmin == resource.data.superAdmin &&
                       request.resource.data.adminOf == resource.data.adminOf;
    }

    // ============================================================================
    // COMPANIES (TENANTS) COLLECTION
    // ============================================================================
    
    match /companies/{companyId} {
      // TEMPORARY: Allow all users to read any company document for debugging.
      allow get: if true;

      // Only allow super admins to list all companies.
      allow list: if isSuperAdmin();
      
      // WRITE RULES (create, update, delete)
      // Allow a signed-in user to create a company, as long as they set themselves as the admin.
      allow create: if (isSignedIn() && request.resource.data.adminUid == request.auth.uid) || isSuperAdmin();
      
      // An admin of the company or a super admin can update it.
      allow update: if isSuperAdmin() || isCompanyAdmin(companyId);
      
      // Only a Super Admin can delete a company.
      allow delete: if isSuperAdmin();
      
      // --- NESTED: SERVICES SUBCOLLECTION ---
      match /services/{serviceId} {
        allow read: if get(/databases/$(database)/documents/companies/$(companyId)).data.isPublic == true || 
                       isSuperAdmin() || isCompanyAdmin(companyId);
        allow create, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow write: if request.resource.data.name is string &&
                        request.resource.data.name.size() > 1 &&
                        request.resource.data.name.size() < 100 &&
                        request.resource.data.minimumPrice is number &&
                        request.resource.data.minimumPrice >= 0;
      }
      
      // --- NESTED: BOOKINGS SUBCOLLECTION ---
      match /bookings/{bookingId} {
        allow read, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
        allow create: if request.resource.data.customerInfo.email is string &&
                         request.resource.data.totalPrice is number &&
                         request.resource.data.totalPrice >= 0 &&
                         request.resource.data.status == 'pending';
      }
      
      // --- NESTED: PAYMENT CONFIG SUBCOLLECTION ---
      match /paymentConfig/{configId} {
        allow read, write: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
      
      // --- NESTED: CALCULATORS SUBCOLLECTION ---
      match /calculators/{calculatorId} {
        allow read: if get(/databases/$(database)/documents/companies/$(companyId)).data.isPublic == true || 
                       isSuperAdmin() || isCompanyAdmin(companyId);
        allow create, update, delete: if isSuperAdmin() || isCompanyAdmin(companyId);
      }
    }
    
    // ============================================================================
    // CUSTOMERS COLLECTION (for Stripe extension)
    // ============================================================================
    match /customers/{customerId} {
      allow create: if isOwner(customerId) || isSuperAdmin();
      allow read, update, delete: if isOwner(customerId) || isSuperAdmin();

      // Allow the user to create and read their own checkout_sessions
      match /checkout_sessions/{sessionId} {
        allow create: if isOwner(customerId) || isSuperAdmin();
        allow read: if isOwner(customerId) || isSuperAdmin();
      }
    }
    
    // ============================================================================
    // DEPRECATED & GLOBAL COLLECTIONS
    // ============================================================================
    
    match /tenants/{tenantId} {
        allow read, write: if false; // Disallow all access.
    }

    // Add rule for superAdminUsers collection
    match /superAdminUsers/{userId} {
        allow read: if isOwner(userId) || isSuperAdmin();
    }
  }
}
